var page = require('webpage').create(),
    system = require('system'),
    address, output, size;


// Read in arguments
var args = {};
[ 'site'
, 'path'
, 'windowWidth'
, 'windowHeight'
, 'shotWidth'
, 'shotHeight'
, 'userAgent'
, 'script'
, 'paperSize'
, 'streamType'
, 'siteType'
, 'renderDelay'
, 'takeShotOnCallback'
, 'ignoreSslErrors'
].forEach(function(name, i) {
	
	
  args[name] = system.args[i + 1];
//console.log(name+"="+system.args[i+1]);
});
//address = system.args[1];
// Set the window size
//page.viewportSize = {
//  width: args.windowWidth
//, height: args.windowHeight
//};
//page.viewportSize = { width: 600, height: 600 };
// Set the user agent string
if (args.userAgent) {
  page.settings.userAgent = args.userAgent;
}
if (args.paperSize) {
  page.paperSize = JSON.parse(args.paperSize);
}
page.settings.resourceTimeout = 10000;
var whenLoadFinished = function(status) {
  if (status === 'fail') {
    page.close();
	console.log("0");
    phantom.exit(1);
    return;
  }

  // Wait `args.renderDelay` seconds for the page's JS to kick in
  window.setTimeout(function () {

    // Determine the page's dimensions
    var pageDimensions = page.evaluate(function() {
//	console.log("in eval");
      var body = document.body || {};
      var documentElement = document.documentElement || {};
      return {
        width: Math.max( 
          body.offsetWidth
        , body.scrollWidth
        , documentElement.clientWidth
        , documentElement.scrollWidth
        , documentElement.offsetWidth
        )
      , height: Math.max(
          body.offsetHeight
        , body.scrollHeight
        , documentElement.clientHeight
        , documentElement.scrollHeight
        , documentElement.offsetHeight
        )
      };
    });

    /*
     * Given a shotSize dimension, return the actual number of pixels in the 
     * dimension that phantom should render.
     *
     * @param (String) dimension
     * @param (String or Number) value
     */
    var pixelCount = function(dimension, value) {

      return {
        window: args[{
          width: 'windowWidth'
        , height: 'windowHeight'
        }[dimension]]
      , all: pageDimensions[dimension]
      }[value] || value
    };
	//console.log(pixelCount('height', args.shotWidth));
    // Set the rectangle of the page to render
    page.clipRect = {
      top: 0
    , left: 0
   , width: pixelCount('width', args.shotWidth)
    , height: pixelCount('height', args.shotHeight)

    };
    if(args.takeShotOnCallback == 'true') {
      
      page.onCallback = function(data) {
        if(data == 'takeShot') {
          renderCleanUpExit();
        }
      };

      // Execute the user's script
      page.evaluate(eval('('+args.script+')'));
      
    } else {
      // Execute the user's script
      page.evaluate(eval('('+args.script+')'));

      renderCleanUpExit();
    }

  }, args.renderDelay);
  
  // Render, clean up, and exit
  function renderCleanUpExit() {
    if (args.path) {
	//var px = pixelCount('height', args,shotHeight);
	//console.log(px);
      page.render(args.path);
    } else {
      console.log(page.renderBase64(args.streamType));
    }
	console.log("2");
    page.close();
    phantom.exit(0);
  }
}

page.onError = function(msg, trace) {};
page.onConsoleMessage = function(msg, lineNum, sourceId) {console.log(msg)};
page.open(args.site, whenLoadFinished);


/*
    address = system.args[1];
	//input = system.args[1];
    output = system.args[2];
    page.viewportSize = { width: 1027, height: 768 };
    if (system.args.length > 3 && system.args[2].substr(-4) === ".pdf") {
        size = system.args[3].split('*');
        page.paperSize = size.length === 2 ? { width: size[0], height: size[1], margin: '0px' }
                                           : { format: system.args[3], orientation: 'portrait', margin: '1cm' };
    }
    if (system.args.length > 4) {
        page.zoomFactor = system.args[4];
    }
	page.settings.resourceTimeout = 10000;
//	page.settings.userAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.110 Safari/537.36";
	page.customHeaders = {
	'User-Agent': 'Mozilla/5.0 (X11; Linux i686; rv:18.0) Gecko/20100101 Firefox/18.0'
	};
	page.onNavigationRequested = function(url, type, willNavigate, main) {
	       //console.log('Trying to navigate to: ' + url);
		    //console.log('Caused by: ' + type);
		    //console.log('Will actually navigate: ' + willNavigate);
		    //console.log('Sent from the pagea6ad781389c4b07f566efdc15e629fc4363793f8#39;s main frame: ' + main);
	    };
    page.open(address, function (status) {
        if (status !== 'success') {
            //console.log('Unable to load the address!');
			page.content="<html><body>"+address+" is taking too long to respond. Please try again later.</body></html>";
			page.render(output);
			console.log("1");
            phantom.exit();
        } else {
            window.setTimeout(function () {
				//console.log(output);
                page.render(output);
				console.log("2");
                phantom.exit();
            }, 200);
        }
    });
*/


